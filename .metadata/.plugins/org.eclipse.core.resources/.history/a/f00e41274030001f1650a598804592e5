package screen.sortingApp;

import screen.menu.MainMenu;
import screen.sortingApp.color.ColorManager;
import screen.sortingApp.visualizer.*;
import screen.sortingApp.button.*;
import screen.sortingApp.canvas.*;
import screen.sortingApp.chatbox.ChatBox;
import screen.sortingApp.formatter.*;

import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferStrategy;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import java.text.NumberFormat;


public class MainFrame extends JFrame implements PropertyChangeListener,
	   ChangeListener, Visualizer.SortedListener,
	   ButtonPanel.SortButtonListener, MyCanvas.VisualizerProvider {
	public static final long serialVersionUID = 10L;
	private static final int WIDTH = 1100, HEIGHT = 900;
	private static final int CAPACITY = 50;
	private JPanel mainPanel, inputPanel, inforPanel;
	private ButtonPanel buttonPanel;
	private JLabel capacityLabel, /*fpsLabel */ timeLabel, compLabel, swapLabel;

	private JButton backButton;
	private JFormattedTextField capacityField;
	//private JSlider fpsSlider;
	private MyCanvas canvas;
	private Visualizer visualizer;
	private Thread thread;
	private boolean sortingInProgress = false;
	

	public MainFrame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setMaximumSize(new Dimension(WIDTH, HEIGHT + 200));
		setMinimumSize(new Dimension(WIDTH, HEIGHT + 20));
		setPreferredSize(new Dimension(WIDTH, HEIGHT + 20));
		setLocationRelativeTo(null);
		setResizable(false);
		setBackground(ColorManager.MENU_BACKGROUND);
		setTitle("Sorting Visualizer");

		initialize();
	       // Position the frame on the right side of the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = screenSize.width - this.getWidth();
        int y = (screenSize.height - this.getHeight()) / 2;
        setLocation(x, y);
	}


	// initialize components
	private void initialize() {
		mainPanel = new JPanel();
		mainPanel.setLayout(null);
		mainPanel.setBackground(ColorManager.MENU_BACKGROUND);
		add(mainPanel);

		//add back to menu button
		backButton = new JButton("Back to menu");
		backButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				new MainMenu();
				dispose();
			}
		});

		// add buttons panel
		buttonPanel = new ButtonPanel(this);
		buttonPanel.setBounds(0, 150, 250, 600);
		buttonPanel.setBackground(ColorManager.SORTAPP_BACKGROUND);
		mainPanel.add(buttonPanel);

		// add canvas
		canvas = new MyCanvas(this);
		int cWidth = WIDTH - 250 - 10;
		int cHeight = HEIGHT - 80;
		canvas.setFocusable(false);
		canvas.setMaximumSize(new Dimension(cWidth, cHeight));
		canvas.setMinimumSize(new Dimension(cWidth, cHeight));
		canvas.setPreferredSize(new Dimension(cWidth, cHeight));
		canvas.setBounds(250, 60, cWidth, cHeight);
		mainPanel.add(canvas);
		pack();


		// sorting visualizer(in case we do not create manually or random)
		visualizer = new Visualizer(CAPACITY, this);
		visualizer.createRandomArray(canvas.getWidth(), canvas.getHeight());


		// create an input field for capacity
		// labels
		capacityLabel = new JLabel("Capacity");
		capacityLabel.setForeground(ColorManager.TEXT);
		capacityLabel.setFont(new Font(null, Font.BOLD, 15));

		// capacity input fields
		NumberFormat format = NumberFormat.getNumberInstance();
		Formatter formatter = new Formatter(format);
		formatter.setValueClass(Integer.class);
		formatter.setMinimum(0);
		formatter.setMaximum(200);
		formatter.setAllowsInvalid(false);
		formatter.setCommitsOnValidEdit(true);

		capacityField = new JFormattedTextField(formatter);
		capacityField.setValue(CAPACITY);
		capacityField.setColumns(3);
		capacityField.setFont(new Font(null, Font.PLAIN, 15));
		capacityField.setForeground(ColorManager.TEXT);
		capacityField.setBackground(ColorManager.SORTAPP_BACKGROUND);
		capacityField.setCaretColor(ColorManager.BAR_YELLOW);
		capacityField.setBorder(BorderFactory.createLineBorder(ColorManager.FIELD_BORDER, 1));
		capacityField.addPropertyChangeListener("value", this);

		capacityLabel.setLabelFor(capacityField);

		// input panel
		inputPanel = new JPanel(new GridLayout(1, 0));
		inputPanel.add(capacityLabel);
		inputPanel.add(capacityField);
		inputPanel.setBackground(ColorManager.MENU_BACKGROUND);
		inputPanel.setBounds(40, 90, 170, 30);
		mainPanel.add(inputPanel);
		
		//Panel for evaluating value
		timeLabel = new JLabel("Elapsed Time: 0 Âµs");
		timeLabel.setFont(new Font(null, Font.PLAIN, 15));
		timeLabel.setForeground(ColorManager.RED_TEXT);

		// comparisons
		compLabel = new JLabel("Comparisons: 0");
		compLabel.setFont(new Font(null, Font.PLAIN, 15));
		compLabel.setForeground(ColorManager.TEXT_YELLOW);

		// swapping
		swapLabel = new JLabel("Swaps: 0");
		swapLabel.setFont(new Font(null, Font.PLAIN, 15));
		swapLabel.setForeground(ColorManager.TEXT_GREEN);

		// statistics panel
		inforPanel = new JPanel(new GridLayout(1, 0));
		inforPanel.setAlignmentX(JPanel.CENTER_ALIGNMENT);
		inforPanel.add(timeLabel);
		inforPanel.add(compLabel);
		inforPanel.add(swapLabel);
		inforPanel.setBackground(ColorManager.MENU_BACKGROUND);
		inforPanel.setBounds(410, 20, 800, 30);
		mainPanel.add(inforPanel);
	}


	/* IMPLEMENTED METHODS */

	// the capacity is changed
	public void propertyChange(PropertyChangeEvent e) {
		// update capacity
		int value = ((Number) capacityField.getValue()).intValue();
		visualizer.setCapacity(value);
	}


	// button clicked
	public void sortButtonClicked(int id) {
		thread = new Thread(() -> {
			switch (id) {
				case 0:
				    if (sortingInProgress) return;
				    else {
				    	visualizer.createManualArray(canvas.getWidth(), canvas.getHeight());
				    }
				    break;
				case 1:  // create button
					if (sortingInProgress) return;
					else {
	                    SwingUtilities.invokeLater(() -> {
	                        showArrayCreationOptions();
	                    });
					}
					break;
				case 2: // 1 sorting algorithm
					if (sortingInProgress) return;
					else {
						sortingInProgress = true;
						visualizer.visualizeBubbleSort();
					}
					break;
				case 3:  // 1 sorting algorithm
					if (sortingInProgress) return;
					else {
						sortingInProgress = true;
						visualizer.visualizeSelectionSort();
					}
					break;
				case 4:  // 1 sorting algorithm
					if (sortingInProgress) return;
					else {
						sortingInProgress = true;
						visualizer.visualizeInsertionSort();
					}
					break;
				case 5: //1 sorting algorithm
					if (sortingInProgress) return;
					else {
						sortingInProgress = true;
						visualizer.visualizeMergeSort();
					}
					break;
				case 6:
					new ChatBox().setVisible(true);
					break;
				case 7:  //
					new MainMenu().setVisible(true);
					dispose();
				}
			sortingInProgress = false;
		});
		thread.start();
	}

	private void showArrayCreationOptions() {
	    String[] options = {"Random", "Nearly Sorted", "Reverse Sorted", "Few Unique"};
	    int choice = JOptionPane.showOptionDialog(null, "Choose array type", "Array Type",
	            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

	    switch (choice) {
	        case 0:
	            visualizer.createRandomArray(canvas.getWidth(), canvas.getHeight());
	            break;
	        case 1:
	            visualizer.createNearlySortedArray(canvas.getWidth(), canvas.getHeight());
	            break;
	        case 2:
	            visualizer.createReverseSortedArray(canvas.getWidth(), canvas.getHeight());
	            break;
	        case 3:
	            visualizer.createFewUniqueArray(canvas.getWidth(), canvas.getHeight());
	            break;
	        default:
	            visualizer.createRandomArray(canvas.getWidth(), canvas.getHeight());
	    }
	}

	// draw the array
	public void onDrawArray() {
		if (visualizer != null)
			visualizer.drawArray();
	}


	// showing statistics when sorting is completed
	public void onArraySorted(long elapsedTime, int comp, int swapping) {
		timeLabel.setText("Elapsed Time: " + (int) (elapsedTime / 1000.0) + " s");
		compLabel.setText("Comparisons: " + comp);
		swapLabel.setText("Swaps: " + swapping);
	}


	// return the graphics for drawing
	public BufferStrategy getBufferStrategy() {
		BufferStrategy bs = canvas.getBufferStrategy();
		if (bs == null) {
			canvas.createBufferStrategy(2);
			bs = canvas.getBufferStrategy();
		}

		return bs;
	}


	@Override
	public void stateChanged(ChangeEvent e) {
		// TODO Auto-generated method stub
		
	}

}