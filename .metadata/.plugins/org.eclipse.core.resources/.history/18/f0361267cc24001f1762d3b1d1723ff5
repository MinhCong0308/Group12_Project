package screen.sortingApp.visualizer;
import javax.swing.JOptionPane;
import java.awt.image.BufferStrategy;
import java.awt.Color;
import java.awt.Graphics;
import screen.sortingApp.color.*;
import screen.sortingApp.bar.Bar;
import sorting.BubbleSort;
import sorting.InsertionSort;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import sorting.SelectionSort;
import sorting.MergeSort;

//RED_BAR: represent for the pivot(marked point using for selection and insertion)
//CYON_BAR: represent for local sorted array.
//GREEN_BAR: represent for global sorted array
//Yellow_BAR: represent for colorCombaring
public class Visualizer {
    // Padding at the 2 ends
    private static final int PADDING = 20;
    // Max and Min height of bars
    private static final int MAX_BAR_HEIGHT = 350, MIN_BAR_HEIGHT = 30;
    // Array of integers store the values
    private int[] array;
    // The number of elements that user want to sort
    private int capacity;
    // Array of bars that will display on canvas
    private Bar[] bars;
    // Check if exist array, draw the bars again if canvas reset
    private boolean existedArray;
    //The speed of sorting
    private int speed = 10;
	
	//Value for statistic
	private long startTime, time;
	private int comp, swapping;
	
	private Color originalColor; /*swappingColor, comparingColor;*/
	private BufferStrategy bs;
	private Graphics g;
	
	private SortedListener listener;
	
	public Visualizer(int capacity, SortedListener listener) {
		this.capacity = capacity;
        this.listener = listener;
        originalColor = ColorManager.BAR_WHITE;
        bs = listener.getBufferStrategy();
        existedArray = false;
	}
	// Create array
	public void createManualArray(int canvasWidth, int canvasHeight) {
	    array = new int[capacity];
	    bars = new Bar[capacity];
	    existedArray = true;
        if(comp != 0){
             listener.onArraySorted(0,0,0);
        }
	    // Get graphics
	    g = bs.getDrawGraphics();
	    g.setColor(ColorManager.SORTAPP_BACKGROUND);
	    g.fillRect(0, 0, canvasWidth, canvasHeight);

	    // Prompt user to enter array elements manually
	    for (int i = 0; i < array.length; i++) {
	        String input = JOptionPane.showInputDialog("Enter value for element " + (i + 1) + ":");
	        try {
	            int value = Integer.parseInt(input);
	            array[i] = value;
	        } catch (NumberFormatException e) {
	            // Handle invalid input
	            JOptionPane.showMessageDialog(null, "Invalid input! Please enter a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
	            return;
	        }

	        // Draw the bar representing the entered value
	        double x = PADDING + i * ((canvasWidth - PADDING * 2.0) / capacity);
	        int barHeight = Math.min(MAX_BAR_HEIGHT, Math.max(MIN_BAR_HEIGHT, array[i]));
	        Bar bar = new Bar((int) x, canvasHeight - PADDING, (int) ((canvasWidth - PADDING * 2.0) / capacity), barHeight, originalColor);
	        bar.draw(g);
	        bars[i] = bar;
	    }

	    bs.show();
	    g.dispose();
	}
	
    // 1. Create random array
	public void createRandomArray(int canvasWidth, int canvasHeight) {
        array = new int[capacity];
        bars = new Bar[capacity];
        existedArray = true;
        if(comp != 0){
             listener.onArraySorted(0,0,0);
        }
        drawBars(canvasWidth, canvasHeight);
    }
	public void createNearlySortedArray(int canvasWidth, int canvasHeight) {
	    array = new int[capacity];
	    bars = new Bar[capacity];
	    existedArray = true;
	    if(comp != 0){
	        listener.onArraySorted(0, 0, 0);
	    }
	    for (int i = 0; i < array.length; i++) {
	        array[i] = MIN_BAR_HEIGHT + (i * (MAX_BAR_HEIGHT - MIN_BAR_HEIGHT) / capacity);
	    }

	    Random rand = new Random();
	    for (int i = 0; i < array.length / 10; i++) {
	        int index1 = rand.nextInt(array.length);
	        int index2 = rand.nextInt(array.length);
	        int temp = array[index1];
	        array[index1] = array[index2];
	        array[index2] = temp;
	    }

	}

	public void generateReverseSortedArray(int canvasWidth, int canvasHeight) {
	    array = new int[capacity];
	    bars = new Bar[capacity];
	    existedArray = true;
	    if(comp != 0){
	        listener.onArraySorted(0, 0, 0);
	    }

	    double x = PADDING;
	    int y = canvasHeight - PADDING;
	    double width = (double) (canvasWidth - PADDING * 2) / capacity;

	    g = bs.getDrawGraphics();
	    g.setColor(ColorManager.SORTAPP_BACKGROUND);
	    g.fillRect(0, 0, canvasWidth, canvasHeight);

	    for (int i = 0; i < array.length; i++) {
	        array[i] = MAX_BAR_HEIGHT - (i * (MAX_BAR_HEIGHT - MIN_BAR_HEIGHT) / capacity);
	    }

	    for (int i = 0; i < array.length; i++) {
	        Bar bar = new Bar((int) x, y, (int) width, array[i], originalColor);
	        bar.draw(g);
	        bars[i] = bar;
	        x += width;
	    }

	    bs.show();
	    g.dispose();
	}

	public void generateFewUniqueArray(int canvasWidth, int canvasHeight) {
	    array = new int[capacity];
	    bars = new Bar[capacity];
	    existedArray = true;
	    if(comp != 0){
	        listener.onArraySorted(0, 0, 0);
	    }

	    double x = PADDING;
	    int y = canvasHeight - PADDING;
	    double width = (double) (canvasWidth - PADDING * 2) / capacity;

	    g = bs.getDrawGraphics();
	    g.setColor(ColorManager.SORTAPP_BACKGROUND);
	    g.fillRect(0, 0, canvasWidth, canvasHeight);

	    Random rand = new Random();
	    int uniqueValues = rand.nextInt(5) + 1;
	    for (int i = 0; i < array.length; i++) {
	        array[i] = MIN_BAR_HEIGHT + rand.nextInt(uniqueValues) * (MAX_BAR_HEIGHT - MIN_BAR_HEIGHT) / 5;
	    }

	    for (int i = 0; i < array.length; i++) {
	        Bar bar = new Bar((int) x, y, (int) width, array[i], originalColor);
	        bar.draw(g);
	        bars[i] = bar;
	        x += width;
	    }

	    bs.show();
	    g.dispose();
	}
	public void drawBars(int canvasWidth, int canvasHeight) {
        // initial position
	    double x = PADDING;
	    int y = canvasHeight - PADDING;
	    double width = (double) (canvasWidth - PADDING * 2) / capacity;

	    g = bs.getDrawGraphics();
	    g.setColor(ColorManager.SORTAPP_BACKGROUND);
	    g.fillRect(0, 0, canvasWidth, canvasHeight);
	    for (int i = 0; i < array.length; i++) {
	        Bar bar = new Bar((int) x, y, (int) width, array[i], originalColor);
	        bar.draw(g);
	        bars[i] = bar;
	        x += width;
	    }

	    bs.show();
	    g.dispose();
	}

    // 2. Bubble sort visualization
    public void visualizeBubbleSort() {
        resetPara();
        BubbleSort bubbleSort = new BubbleSort(array, bars, g, speed, bs);
        startTime = System.currentTimeMillis();
        bubbleSort.visualize();
        comp = bubbleSort.getComp();
        swapping = bubbleSort.getSwap();
        time = System.currentTimeMillis() - startTime;
        listener.onArraySorted(time, comp, swapping);
        g.dispose();
    }
    
    // 3. Selection sort visualization
    public void visualizeSelectionSort() {
        resetPara();
    	SelectionSort selectionSort = new SelectionSort(array, bars, g, speed, bs);
    	startTime = System.currentTimeMillis();
    	selectionSort.visualize();
    	comp = selectionSort.getComp();
    	swapping = selectionSort.getSwap();
    	time = System.currentTimeMillis() - startTime;
    	listener.onArraySorted(time, comp, swapping);
        g.dispose();
    }
    


    public void setAllGreen(int i) {
    	for (int j = 0; j < i; j++) {
    		bars[j].clear(g);
    		bars[j].setColor(ColorManager.BAR_GREEN);
    		bars[j].draw(g);
    	}
    	bs.show();
    }
    public void visualizeInsertionSort() {
    	InsertionSort insertionSort = new InsertionSort(array, bars, g, speed, bs);
    	startTime = System.currentTimeMillis();
    	insertionSort.visualize();
    	comp = insertionSort.getComp();
    	swapping = insertionSort.getSwap();
    	time = System.currentTimeMillis() - startTime;
    	listener.onArraySorted(time, comp, swapping);
        g.dispose();
    }
    
    public void swapBar(int i, int j) {
    	bars[i].clear(g);
    	bars[j].clear(g);
    	bars[i].setValue(array[i]);
    	bars[j].setValue(array[j]);
    	bars[i].setColor(ColorManager.BAR_BLUE);
    	bars[j].setColor(ColorManager.BAR_ORANGE);
    	bars[i].draw(g);
    	bars[j].draw(g);
    	bs.show();
    	if (i < array.length - 1) sleep(speed);
    }

	

    public void swap(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    

    public void setColorComparing(int minIndex, int j) {
        bars[j].clear(g);
        bars[minIndex].clear(g);
        bars[minIndex].setColor(ColorManager.BAR_YELLOW);
        bars[minIndex].draw(g);
        bars[j].setColor(ColorManager.BAR_YELLOW);
        
        bars[j].draw(g);
        sleep(speed);
        bs.show();
    }
    
    public void setColorComparingForSelectionSort(int minIndex, int j, int i) {
        bars[j].clear(g);
        if (minIndex != i) {
	        bars[minIndex].clear(g);
	        bars[minIndex].setColor(ColorManager.BAR_YELLOW);
	        bars[minIndex].draw(g);
        }
        bars[j].setColor(ColorManager.BAR_YELLOW);
        
        bars[j].draw(g);
        sleep(speed);
        bs.show();
    }

    public void visualizeHeapSort() {
        g = bs.getDrawGraphics();
        // Set up variables for statistics
        comp = 0;
        swapping = 0;
        startTime = System.nanoTime();
    
        // max heap
        buildMaxHeap();
    
        // Extract elements from heap one by one
        for (int i = array.length - 1; i >= 0; i--) {
            swap(0, i); // Move cur root to end
            swapBarHeapSort(0, i); // Visualize swapping
            swapping++;
            maxHeapify(0, i); // Call maxHeapify on the reduced heap
            setColorNormal(0, i); // Reset color
        }
    
        time = System.nanoTime() - startTime;
        // Call function to display statistics
        listener.onArraySorted(time, comp, swapping);
        g.dispose();
    }
    
    private void buildMaxHeap() {
        for (int i = array.length / 2 - 1; i >= 0; i--) {
            maxHeapify(i, array.length);
        }
    }
    
    private void maxHeapify(int i, int heapSize) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
    
        if (left < heapSize && array[left] > array[largest]) {
            largest = left;
        }
    
        if (right < heapSize && array[right] > array[largest]) {
            largest = right;
        }
    
        if (largest != i) {
            swap(i, largest);
            swapBarHeapSort(i, largest); // Visualize swapping
            swapping++;
            maxHeapify(largest, heapSize);
        }
    }
    
    private void swapBarHeapSort(int i, int j) {
        bars[i].clear(g);
        bars[j].clear(g);
        bars[i].setValue(array[i]);
        bars[j].setValue(array[j]);
        bars[i].setColor(ColorManager.BAR_RED);
        bars[j].setColor(ColorManager.BAR_RED);
        bars[i].draw(g);
        bars[j].draw(g);
        bs.show();
        sleep(speed * 10);
        bars[i].clear(g);
        bars[j].clear(g);
        bars[i].setValue(array[i]);
        bars[j].setValue(array[j]);
        bars[i].setColor(ColorManager.BAR_WHITE);
        bars[j].setColor(ColorManager.BAR_WHITE);
        bars[i].draw(g);
        bars[j].draw(g);
        bs.show();
    }
    
    public void visualizeMergeSort() {
    	MergeSort sort = new MergeSort(array, bars, g, speed, bs);
    	startTime = System.currentTimeMillis();
    	sort.visualize();
    	comp = sort.getComp();
    	swapping = sort.getSwap();
    	time = System.currentTimeMillis() - startTime;
    	listener.onArraySorted(time, comp, swapping);
        g.dispose();
    }
    public void setColorNormal(int i, int j) {
        bars[i].clear(g);
        bars[j].clear(g);
        bars[i].setColor(ColorManager.BAR_WHITE);
        bars[j].setColor(ColorManager.BAR_WHITE);
        bars[i].draw(g);
        bars[j].draw(g);
        bs.show();
    }

    public void sleep(int speed) {
        try {
                TimeUnit.MILLISECONDS.sleep(speed); // Sleep after each pass
        } catch (Exception ex) {
                // Handle exception
        }
    }


    public void setCapacity(int capacity)
    {
        this.capacity = capacity;
    }
    // for restore purpose
    public void drawArray()
    {
        if (!existedArray)
            return;

        g = bs.getDrawGraphics();

        for (int i = 0; i < bars.length; i++)
        {
            bars[i].draw(g);
        }

        bs.show();
        g.dispose();
    }
    public void resetPara(){
        listener.onArraySorted(0, 0, 0);
    }
    public interface SortedListener
    {
        void onArraySorted(long elapsedTime, int comparison, int swapping);
        BufferStrategy getBufferStrategy();
    }
}
